geom_point(aes(colour = prop, size = prop))+#
leged=false,#
xlab('Mean Daily Intake (calories)')+#
ylab('Food Type')+#
theme_grey()
fplot <- ggplot(data=df, aes(Calories, food))+#
geom_point(aes(colour = prop, size = prop))+#
leged=false,#
xlab('Mean Daily Intake (calories)')+#
ylab('Food Type')+#
theme_grey()+#
opts(legend.position = 'none')
fplot <- ggplot(data=df, aes(Calories, food))+#
geom_point(aes(colour = prop, size = prop))+#
xlab('Mean Daily Intake (calories)')+#
ylab('Food Type')+#
theme_grey()+#
opts(legend.position = 'none')
fplot
q()
d<-50  #  Arena dimensions#
imax<-10 #  Maximum number of environmental scenarios#
#  Position of scenarios re food availability#
x1<-c(40.05080, 53.94681, 53.12216, 69.73980, 78.71962, 89.63910, 74.40690, 12.87094, 14.74229, 50.56299)#
#  Position of scenarios re cover#
x2<-c(43.74108, 72.09569, 80.63761, 70.13924, 75.10604, 29.02603, 50.99674, 38.72836, 22.03755, 47.08547)#
plot(x1,x2, xlab="Total food available (F)", ylab="Total cover available (C)")
FUNCTION: Generates a random environmental layer in a square dxd arena#
# using a total of x focal points#
environ<-function(d,x)#
{#
ar<-array(0, dim=c(d,d))#
# Places seeds in arena#
cox<-cbind(runif(x, min=1, max=d), runif(x, min=1, max=d))#
# Smooths seeds to create spatial autocorrelation#
require(KernSmooth)#
sarx<-bkde2D(cox, bandwidth = c(3,3), gridsize=c(d,d),range.x=list(c(1,d),c(1,d)))#
sarx$fhat<-x*sarx$fhat/sum(sarx$fhat)#
contour(sarx$x1,sarx$x2,sarx$fhat)#
return(sarx$fhat)#
}#
# FUNCTION: Animal simulation. Generates a map of usage given certain movement#
# rules#
movement<-function(d, env1, env2)#
{#
rx<-rep(seq(1,d),d)#
ry<-rep(seq(1,d),each=d)#
r1<-env1[cbind(rx,ry)]/max(env1)#
r2<-env2[cbind(rx,ry)]/max(env2)#
# Parameters#
th1_2<-100        # Threshold for changing behav state 1 to 2#
th2_1<-50         # Threshold for changing behav state 2 to 1#
tmax<-100000      # Simulation duration#
food<-env1        # Food distribution#
cover<-env2       # Cover distribution#
a<-0.2              # Functional response scale parameter#
b<-0.06          # Functional response half-saturation parameter#
den<-0.03         # Metabolic cost#
# Initial conditions#
x<-round(d/2)             # x-coordinate#
y<-round(d/2)             # y-coordinate#
st<-1                     # behavioural state#
en<-rep(70,tmax)          # energy state#
ar<-array(0, dim=c(d,d))  # Utilisation distribution#
# Main loop#
for (t in 2:tmax)#
{#
xu<-ifelse(x==d, 1, x+1)#
xl<-ifelse(x==1, d, x-1)#
yu<-ifelse(y==d, 1, y+1)#
yl<-ifelse(y==1, d, y-1)#
nx<-c(x, x, xu, xl, x)#
ny<-c(y, yu, y, y, yl)#
en[t]<-en[t-1]-den   # Metabolism#
if(en[t]<=0) print("Animal is dead")#
if (st==1)#
{# Foraging#
en[t]<-en[t]+a*food[x,y]/(b+food[x,y])    # Energy gain#
if (en[t]>th1_2) st<-2    # Possible change in behavioural state#
pot<-food[cbind(nx,ny)]+rnorm(5,0,3*mean(food))#
} else#
{# Hiding#
if (en[t]<th2_1) st<-1   # Possible change in behavioural state#
pot<-cover[cbind(nx,ny)]+rnorm(5,0,3*mean(cover))#
}#
x<-nx[which.max(pot)]#
y<-ny[which.max(pot)]#
ar[x,y]<-ar[x,y]+1#
if(t/2000==round(t/2000))#
{#
x<-round(runif(1,1,d))             # x-coordinate#
x<-round(runif(1,1,d))            # y-coordinate#
par(mfrow=c(2,3))#
image(food,col = terrain.colors(50), axes=FALSE, main="Food")#
image(cover,col = terrain.colors(50), axes=FALSE, main="Cover")#
plot(rx,ry, pch=15, col=rgb(r1,r2,0), cex=2, axes=FALSE, xlab="", ylab="", main="Combined resources")#
image(ar,col = terrain.colors(50), axes=FALSE, main="Utilisation distribution")#
plot(en[seq(1,t,by=100)], type="l")#
par(mfcol=c(1,1))#
}#
}#
return(ar)#
}#
# FUNCTION: Generates predictions from the fixed effects of a mixed model#
predict.lmer<- function(mod, newdat)#
{#
b <- fixef(mod)#
exp(newdat %*% b)#
}
imax
i=1
env1<-environ(d,x1[i])                # Generates 1st environmental layer (e.g. food)
env2<-environ(d,x2[i])                # Generates 2nd environmental layer (e.g. cover)
ar<-movement(d,env1,env2)             # Simulates movement and generates animal's usage map
dim(env2)
env2[1:10,1:10]
dim(ar)
image(ar)
dat<-data.frame(use=c(ar[1:d,]),food=c(env1[1:d,]),cover=c(env2[1:d,]), site=rep(i,d^2)) # Data frame for single model fit#
ifelse(i==1, data<-dat, data<-rbind(data,dat))
for(i in 1:imax)#
{#
print(c("Iteration ",i))#
env1<-environ(d,x1[i])                # Generates 1st environmental layer (e.g. food)#
env2<-environ(d,x2[i])                # Generates 2nd environmental layer (e.g. cover)#
ar<-movement(d,env1,env2)             # Simulates movement and generates animal's usage map#
dat<-data.frame(use=c(ar[1:d,]),food=c(env1[1:d,]),cover=c(env2[1:d,]), site=rep(i,d^2)) # Data frame for single model fit#
ifelse(i==1, data<-dat, data<-rbind(data,dat))#
};#
names(data)<-c("Use", "Food", "Cover", "Site")
head(data)
environ
movement
rx<-rep(seq(1,d),d)
ry<-rep(seq(1,d),each=d)
r1<-env1[cbind(rx,ry)]/max(env1)
r2<-env2[cbind(rx,ry)]/max(env2)
rx
50*50
dim(rx)
length(rx)
ry
r1
dim(env1)
env1
th1_2<-100        # Threshold for changing behav state 1 to 2
th2_1<-50         # Threshold for changing behav state 2 to 1
tmax<-100000      # Simulation duration
food<-env1        # Food distribution
cover<-env2       # Cover distribution
a<-0.2              # Functional response scale parameter
b<-0.06          # Functional response half-saturation parameter
den<-0.03         # Metabolic cost
x<-round(d/2)             # x-coordinate
x
y<-round(d/2)             # y-coordinate
st<-1                     # behavioural state
en<-rep(70,tmax)          # energy state
ar<-array(0, dim=c(d,d))  # Utilisation distribution
dim(en)
length(en)
dim(ar)
t=1
t=2
xu<-ifelse(x==d, 1, x+1)
xl<-ifelse(x==1, d, x-1)
yu<-ifelse(y==d, 1, y+1)
yl<-ifelse(y==1, d, y-1)
nx<-c(x, x, xu, xl, x)
ny<-c(y, yu, y, y, yl)
xu
xl
yu
yl
nx
ny
cbind(nx,ny)
en[t]<-en[t-1]-den   # Metabolism
en[t]
en[t-1]
den
if(en[t]<=0) print("Animal is dead")
st==1
en[t]<-en[t]+a*food[x,y]/(b+food[x,y])    # Energy gain
en[t]>th1_2
if (en[t]>th1_2) st<-2    # Possible change in behavioural state
food[cbind(nx,ny)]+rnorm(5,0,3*mean(food))
pot<-food[cbind(nx,ny)]+rnorm(5,0,3*mean(food))
pot
food[cbind(nx,ny)]
d
?ifelse
plot(nx, ny, type='p')
if (st==1)#
{# Foraging#
en[t]<-en[t]+a*food[x,y]/(b+food[x,y])    # Energy gain#
if (en[t]>th1_2) st<-2    # Possible change in behavioural state#
pot<-food[cbind(nx,ny)]+rnorm(5,0,3*mean(food))#
} else#
{# Hiding#
if (en[t]<th2_1) st<-1   # Possible change in behavioural state#
pot<-cover[cbind(nx,ny)]+rnorm(5,0,3*mean(cover))#
}
pot
cover[cbind(nx,ny)]
nx[which.max(pot)]
ny[which.max(pot)]
x<-nx[which.max(pot)]
y<-ny[which.max(pot)]
ar[x,y]<-ar[x,y]+1
t/2000
round(t/2000)
t/2000==round(t/2000)
ar
apply(ar,2,sum)
attach(data)
rep(tapply(Food, Site, mean), 1, each=d^2)
?tapply
tapply(Food, Site, mean)
summary(data)
unique(data$Site)
d^2
data<-cbind(data,rep(tapply(Food, Site, mean), 1, each=d^2),rep(tapply(Food^2, Site, mean), 1, each=d^2),rep(tapply(Cover, Site, mean), 1, each=d^2),rep(tapply(Cover^2, Site, mean), 1, each=d^2),rep(tapply(Food^3, Site, mean), 1, each=d^2),rep(tapply(Cover^3, Site, mean), 1, each=d^2) )
detach(data)
names(data)<-c("Use", "Food", "Cover", "Site", "EF1","EF2", "EC1", "EC2", "EF3", "EC3")
head(data)
require(lme4)
seq(1,imax*d^2, 5)
length(seq(1,imax*d^2, 5))
length(dat)
length(data)
dim(data)
subda<-data[seq(1,imax*d^2, 5),]   # creates a sparser data set for fitting
names(subda)<-c("Use", "Food", "Cover", "Site", "EF1","EF2", "EC1", "EC2", "EF3", "EC3")
mod0<-lmer(Use~Food+Cover+(Food+Cover|Site), data=subda, family=poisson, REML=F)
require(lme4)
?update
?update.packages
update.packages(matrix)
install.packages()
require(lme4)
q()
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file = 'installed_old.rda')
q()
load('installed_old.rda')
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
installed.packages(missing)
update.packages()
library(ggplot2)
tmp
require(quantmod)#
require(ggplot2)#
require(reshape2)#
require(plyr)#
require(scales)
library(quantmod)
?library
.libPaths()
q()
.libPaths()
library(quantmod)
require(ggplot2)#
require(reshape2)#
require(plyr)#
require(scales)
getSymbols("^VIX",src="yahoo")
VIX
dat<-data.frame(date=index(VIX),VIX)
str(dat)
head(dat)
head(dat$date)
head(as.POSIXlt(dat$date))
head(as.POSIXlt(dat$date)$year)
head(as.POSIXlt(dat$date)$year + 1900)
dat$year<-as.numeric(as.POSIXlt(dat$date)$year+1900)
dat$month<-as.numeric(as.POSIXlt(dat$date)$mon+1)
dat$monthf<-factor(dat$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
dat$weekday = as.POSIXlt(dat$date)$wday
head(dat)
dat$weekdayf<-factor(dat$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE)
dat$yearmonth<-as.yearmon(dat$date)
dat$yearmonthf<-factor(dat$yearmonth)
head(dat)
?as.yearmon
dat$week <- as.numeric(format(dat$date,"%W"))
head(dat)
dat<-ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
head(dat)
P<- ggplot(dat, aes(monthweek, weekdayf, fill = VIX.Close)) + #
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="red", high="yellow") +#
opts(title = "Time-Series Calendar Heatmap") +  xlab("Week of Month") + ylab("")#
P
plot(dat$date, dat$VIX.Close, type = 'l')
q()
?hist
q()
ng
source('/Users/robs/Documents/code/rss10/rightwhales/rightWhaleGibbs.r')
updateStates()
updateStates
updateStates
q()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
wd <- '/Users/rob/Documents/research/presentations/2012/CreemR-Users/mydeck'
setwd(wd)
# author("mydeck")
source('~/.active-rstudio-document', echo=TRUE)
slidfy(index.Rmd)
slidify(index.Rmd)
getwd()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
